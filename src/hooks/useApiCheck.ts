import { useState } from 'react';
import { Alert } from 'react-native';
import {
  checkApiHealth,
  testApiWithSampleRequest,
} from '@/src/features/receipts/service/ocrService';

export const useApiCheck = () => {
  const [isCheckingApi, setIsCheckingApi] = useState(false);

  const quickApiCheck = async () => {
    setIsCheckingApi(true);

    try {
      console.log('üîç Iniciando verifica√ß√£o da API...');
      const healthCheck = await checkApiHealth();

      if (healthCheck.isOnline) {
        Alert.alert(
          '‚úÖ API Online',
          `Servidor funcionando normalmente!\n\nStatus: ${healthCheck.status}\nTempo de resposta: ${healthCheck.responseTime}ms`,
          [{ text: 'OK' }],
        );
      } else {
        Alert.alert(
          '‚ùå API com Problemas',
          `N√£o foi poss√≠vel conectar ao servidor.\n\nErro: ${
            healthCheck.error || 'Desconhecido'
          }\nTempo: ${healthCheck.responseTime}ms`,
          [
            { text: 'Cancelar', style: 'cancel' },
            {
              text: 'Teste Avan√ßado',
              onPress: advancedApiTest,
            },
          ],
        );
      }
    } catch (error) {
      console.error('‚ùå Erro na verifica√ß√£o da API:', error);
      Alert.alert(
        '‚ùå Erro de Verifica√ß√£o',
        'N√£o foi poss√≠vel verificar o estado da API.',
        [{ text: 'OK' }],
      );
    } finally {
      setIsCheckingApi(false);
    }
  };

  const advancedApiTest = async () => {
    try {
      console.log('üß™ Executando teste avan√ßado da API...');
      const testResult = await testApiWithSampleRequest();

      if (testResult.isOnline) {
        Alert.alert(
          '‚úÖ Teste Avan√ßado Bem-sucedido',
          `A API est√° funcionando corretamente!\n\nStatus: ${testResult.status}\nTempo de resposta: ${testResult.responseTime}ms\n\nPodes proceder com a digitaliza√ß√£o dos recibos.`,
          [{ text: 'Excelente!' }],
        );
      } else {
        Alert.alert(
          '‚ùå Teste Avan√ßado Falhado',
          `A API n√£o est√° a responder adequadamente.\n\nStatus: ${
            testResult.status || 'N/A'
          }\nErro: ${testResult.error}\nTempo: ${
            testResult.responseTime
          }ms\n\nVerifica a tua conex√£o √† internet.`,
          [{ text: 'Entendido' }],
        );
      }
    } catch (error) {
      console.error('‚ùå Erro no teste avan√ßado:', error);
      Alert.alert(
        '‚ùå Erro no Teste Avan√ßado',
        'Ocorreu um erro durante o teste da API.',
        [{ text: 'OK' }],
      );
    }
  };

  return {
    quickApiCheck,
    isCheckingApi,
  };
};
